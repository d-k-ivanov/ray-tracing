#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_clock : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require

#include "Common.glsl"
#include "Heatmap.glsl"
#include "Random.glsl"
#include "RayPayload.glsl"
#include "UniformBufferObject.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 1, rgba32f) uniform image2D AccumulationImage;
layout(binding = 2, rgba8) uniform image2D OutputImage;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };

layout(location = 0) rayPayloadEXT RayPayload Ray;

void main()
{
    const uint64_t clock = Camera.ShowHeatmap ? clockARB() : 0;

    // Initialise separate random seeds for the pixel and the rays.
    // - pixel: we want the same random seed for each pixel to get a homogeneous anti-aliasing.
    // - ray: we want a noisy random seed, different for each pixel.
    uint pixelRandomSeed = Camera.RandomSeed;
    Ray.RandomSeed       = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), Camera.TotalNumberOfSamples);

    vec3 pixelColor = vec3(0);

    // Accumulate all the rays for this pixels.
    for(uint s = 0; s < Camera.NumberOfSamples; ++s)
    {
        // if (Camera.NumberOfSamples != Camera.TotalNumberOfSamples) break;
        const vec2 pixel = vec2(gl_LaunchIDEXT.x + RandomFloat(pixelRandomSeed), gl_LaunchIDEXT.y + RandomFloat(pixelRandomSeed));
        const vec2 uv    = (pixel / gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

        vec2 offset    = Camera.Aperture / 2 * RandomInUnitDisk(Ray.RandomSeed);
        vec4 origin    = Camera.ModelViewInverse * vec4(offset, 0, 1);
        vec4 target    = Camera.ProjectionInverse * (vec4(uv.x, uv.y, 1, 1));
        vec4 direction = Camera.ModelViewInverse * vec4(normalize(target.xyz * Camera.FocusDistance - vec3(offset, 0)), 0);
        vec3 rayColor  = vec3(1);

        // Ray scatters are handled in this loop. There are no recursive traceRayEXT() calls in other shaders.
        for(uint b = 0; b <= Camera.NumberOfBounces; ++b)
        {
            const float tMin = 0.001;
            const float tMax = 10000.0;

            // If we've exceeded the ray bounce limit without hitting a light source, no light is gathered.
            // Light emitting materials never scatter in this implementation, allowing us to make this logical shortcut.
            if(b == Camera.NumberOfBounces)
            {
                rayColor = vec3(0, 0, 0);
                break;
            }
            // gl_RayFlagsCullBackFacingTrianglesEXT, gl_RayFlagsCullFrontFacingTrianglesEXT, gl_RayFlagsOpaqueEXT, gl_RayFlagsNoOpaqueEXT
            // const uint rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;
            const uint rayFlags = gl_RayFlagsOpaqueEXT;

            traceRayEXT(Scene,            // acceleration structure
                        rayFlags,         // rayFlags:
                        0xff,             // cullMask
                        0,                // sbtRecordOffset
                        0,                // sbtRecordStride
                        0,                // missIndex
                        origin.xyz,       // ray origin
                        tMin,             // ray min range
                        direction.xyz,    // ray direction
                        tMax,             // ray max range
                        0                 // payload (location = 0)
            );

            const vec3  attenuation = Ray.ColorAndDistance.rgb;
            const vec3  emitColor   = Ray.EmitColor.rgb;
            const float t           = Ray.ColorAndDistance.w;

            const bool isScattered = Ray.ScatterDirection.w > 0;

            if(t < 0 || !isScattered)
            {
                rayColor *= emitColor;
                break;
            }

// Enable this block to use the pdf value from the ray payload.
#if 1
            if(Ray.SkipPdf)
            {
                rayColor = emitColor + attenuation * rayColor;
            }
            else
            {

                float scatteringPdfValue = Ray.ScatterPdf;

                // float pdfValue = scatteringPdfValue;
                // float cosTheta = dot(normalize(direction.xyz), normalize(Ray.ScatterDirection.xyz));
                // float pdfValue = 1 / (2 * M_PI) * (1 + cosTheta);
                // float pdfValue = 1 / (2 * M_PI);
                float pdfValue = Ray.Pdf;

                if(isnan(pdfValue) || pdfValue == 0)
                {
                    // rayColor *= attenuation;
                    rayColor *= emitColor;
                    // rayColor = emitColor + attenuation * rayColor;
                    // pdfValue = scatteringPdfValue;
                    // pdfValue = 1.0;
                }
                else
                {
                    vec3 colorFromScatter = (emitColor + attenuation * scatteringPdfValue ) / pdfValue;
                    rayColor              = colorFromScatter * rayColor;
                }
            }

#else
            rayColor = emitColor + attenuation * rayColor;
#endif

            // Trace missed, or end of trace.
            if(t < 0 || !isScattered)
            {
                break;
            }

            // Trace hit.
            origin    = origin + t * direction;
            direction = vec4(Ray.ScatterDirection.xyz, 0);
        }

        pixelColor += rayColor;
    }

    const bool accumulate       = Camera.NumberOfSamples != Camera.TotalNumberOfSamples;
    const vec3 accumulatedColor = (accumulate ? imageLoad(AccumulationImage, ivec2(gl_LaunchIDEXT.xy)) : vec4(0)).rgb + pixelColor;

    pixelColor = accumulatedColor / Camera.TotalNumberOfSamples;

    // Apply raytracing-in-one-weekend gamma correction.
    pixelColor = sqrt(pixelColor);

    if(Camera.ShowHeatmap)
    {
        const uint64_t deltaTime       = clockARB() - clock;
        const float    heatmapScale    = 1000000.0f * Camera.HeatmapScale * Camera.HeatmapScale;
        const float    deltaTimeScaled = clamp(float(deltaTime) / heatmapScale, 0.0f, 1.0f);

        pixelColor = heatmap(deltaTimeScaled);
    }

    imageStore(AccumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(accumulatedColor, 0));
    imageStore(OutputImage, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0));
}
